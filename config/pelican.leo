<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2"/>
<globals/>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="yen.20170108171605.1"><vh>@settings</vh>
<v t="yen.20170108171605.2"><vh>@data qt-gui-plugin-style-sheet</vh></v>
<v t="yen.20170108171605.3"><vh>@string initial_split_orientation = horizontal</vh></v>
</v>
<v t="yen.20170108171733.1"><vh>@path ../</vh>
<v t="leo.20180115150519.1"><vh>@edit index.html</vh></v>
<v t="yen.20170108171733.4"><vh>@edit .gitignore</vh></v>
<v t="leo.20170908162839.1"><vh>沒有 disqus 論壇</vh>
<v t="yen.20170108171733.2"><vh>@button local-blog</vh></v>
</v>
<v t="leo.20170908162904.1"><vh>有 disqus 論壇</vh>
<v t="leo.20170709224430.1"><vh>@button github-blog</vh></v>
</v>
<v t="yen.20170108171733.5"><vh>Pelican 設定</vh>
<v t="leo.20170709020600.1"><vh>共用</vh></v>
<v t="yen.20170108171733.7"><vh>@edit pelicanconf.py</vh></v>
<v t="leo.20170709015947.1"><vh>遠端</vh></v>
<v t="leo.20170709015955.1"><vh>@edit publishconf.py</vh></v>
<v t="leo.20170709015940.1"><vh>近端</vh></v>
<v t="yen.20170108171733.6"><vh>@edit local_publishconf.py</vh></v>
</v>
<v t="yen.20170224232341.1"><vh>編輯 template</vh>
<v t="leo.20180115093448.1"><vh>@path theme/attila/templates</vh>
<v t="leo.20180715212936.1"><vh>@edit article.html</vh></v>
<v t="leo.20180115093536.1"><vh>@edit base.html</vh></v>
<v t="leo.20180115093657.1"><vh>@edit search.html</vh></v>
<v t="leo.20180115093715.1"><vh>@edit archives.html</vh></v>
<v t="leo.20180715212745.1"><vh>@edit categories.html</vh></v>
<v t="leo.20180715212902.1"><vh>@edit index.html</vh></v>
<v t="leo.20180115093726.1"><vh>@path partials</vh>
<v t="leo.20180115093749.1"><vh>@edit navigation.html</vh></v>
</v>
</v>
</v>
<v t="leo.20170710015511.1"><vh>編輯 plugin</vh>
<v t="leo.20170710015523.1"><vh>@path plugin</vh>
<v t="leo.20170710015523.2"><vh>@path tipue_search</vh>
<v t="leo.20170710015523.3"><vh>@edit tipue_search.py</vh></v>
</v>
</v>
</v>
<v t="yen.20170108171733.71"><vh>@path markdown</vh>
<v t="yen.20170108171733.81"><vh>@path pages</vh>
<v t="yen.20170108171733.82"><vh>@edit pages_1.md</vh></v>
</v>
</v>
<v t="leo.20170710022054.1"><vh>可以另建節點存放 markdown 目錄下的 md 檔案</vh></v>
<v t="leo.20170710022041.1"><vh>@path markdown</vh>
<v t="leo.20220827124834.1"><vh>2022</vh>
<v t="leo.20220827124834.2"><vh>2022 Fall CAD 課程</vh>
<v t="leo.20220827124834.3"><vh>@edit 20220814.md</vh></v>
</v>
<v t="leo.20220827125802.1"><vh>@clean 20220819.md</vh>
<v t="leo.20220827125802.2"><vh>2022 Fall CP 課程</vh></v>
</v>
<v t="leo.20220827124834.4"><vh>@clean 20220823.md</vh>
<v t="leo.20220827124834.5"><vh>可攜 CoppeliaSim 4.3.0 rev12</vh></v>
</v>
<v t="leo.20220827125817.1"><vh>@clean 20220823-1.md</vh>
<v t="leo.20220827125817.2"><vh>建立可攜 Python 系統</vh></v>
</v>
<v t="leo.20220827124834.6"><vh>@clean 20220824.md</vh>
<v t="leo.20220827124834.7"><vh>電腦輔助設計室系統更新</vh></v>
</v>
<v t="leo.20220827124834.8"><vh>@clean 20220826.md</vh>
<v t="leo.20220827124834.9"><vh>編譯 CoppeliaSim 4.3.0 rev12</vh></v>
</v>
<v t="leo.20220827212236.1"><vh>@clean 20220827.md</vh>
<v t="leo.20220827212257.1"><vh>編譯 Solvespace</vh></v>
</v>
<v t="leo.20220827213616.1"><vh>@edit 20220827-1.md</vh></v>
<v t="leo.20220827231014.1"><vh>@edit 20220827-2.md</vh></v>
<v t="leo.20220828113010.1"><vh>@clean useful_git_commands.md</vh>
<v t="leo.20220828113236.1"><vh>有關 Git</vh></v>
</v>
<v t="leo.20220901020048.1"><vh>@clean useful_windows_commands.md</vh>
<v t="leo.20220901020212.1"><vh>Windows 常用指令</vh></v>
</v>
<v t="leo.20220901021551.1"><vh>@clean about_tcexam.md</vh>
<v t="leo.20220901021609.1"><vh>有關 TCExam</vh></v>
</v>
<v t="leo.20220901223644.1"><vh>@clean cp2022_w1.md</vh>
<v t="leo.20220901223953.1"><vh>cp2022_w1</vh></v>
</v>
<v t="leo.20220902013935.1"><vh>@clean about_nx.md</vh>
<v t="leo.20220902013945.1"><vh>有關 NX</vh></v>
</v>
<v t="leo.20220903232957.1"><vh>@clean about classroom.md</vh>
<v t="leo.20220903233110.1"><vh>有關 Github Classroom</vh></v>
</v>
<v t="leo.20220907072921.1"><vh>@clean about_wink.md</vh>
<v t="leo.20220907093741.1"><vh>有關 Wink</vh></v>
</v>
</v>
</v>
<v t="yen.20170108171733.83"><vh>產生 .key 與 .crt 指令</vh></v>
</v>
<v t="yen.20170108171930.1"><vh>@button https server</vh></v>
<v t="yen.20170108171939.1"><vh>@button ipv6 https server</vh></v>
</vnodes>
<tnodes>
<t tx="leo.20170709015940.1"></t>
<t tx="leo.20170709015947.1"></t>
<t tx="leo.20170709020600.1"></t>
<t tx="leo.20170709224430.1">@language python
import os

os.system("pelican markdown -o blog -s publishconf.py")
g.es("admin pelican Github 執行完畢")


</t>
<t tx="leo.20170710015511.1"></t>
<t tx="leo.20170710015523.1"></t>
<t tx="leo.20170710015523.2"></t>
<t tx="leo.20170710022041.1"></t>
<t tx="leo.20170710022054.1"></t>
<t tx="leo.20170908162839.1"></t>
<t tx="leo.20170908162904.1"></t>
<t tx="leo.20180115093448.1"></t>
<t tx="leo.20180115093726.1"></t>
<t tx="leo.20220827124834.1"></t>
<t tx="leo.20220827124834.2"></t>
<t tx="leo.20220827124834.4">@language md
---
Title: 可攜 CoppeliaSim 4.3.0 rev12
Date: 2022-08-23 11:00
Category: cad2022
Tags: Coppeliasim
Slug: portable-CoppeliaSim-4.3.0-rev12
Author: mdecycu
---

CoppeliaSim 的安裝套件採用 [QSetup] 製作, 即便在安裝過程可從 %temp% 中的暫存目錄 (例如: AppData\Local\Temp\SETUP_2639) 取得其 setup.exe 所解開的檔案, 但仍無法直接 extract 出完整的可攜 CoppeliaSim 目錄.

[QSetup]: https://www.pantaray.com/qsetup.html

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="leo.20220827124834.5">Portable CoppeliaSim
====

因此這裡所謂的可攜 [CoppeliaSim], 其實就是從操作系統完成安裝的目錄中取出資料, 然後加上存入操作系統中的 redistributable dll 檔案製作而成.

其中的 vcRedist/vc2019redist_x64.exe 需要利用 [Wix] 解出 .msi 之後, 再利用 [UniExtract2] 解出所需要的 .dll, 並將所有的 .dll 檔案放入可攜 CoppeliaSim 的根目錄中.

解開 vc2019redist_x64.exe 的指令:

&lt;pre class="brush: jscript"&gt;
wix311-binaries\dark.exe vc2019redist_x64.exe -x extracted
&lt;/pre&gt;

表示要在 extracted 目錄中取得 extracted\AttachedContainer\packages\vcRuntimeMinimum_amd64\vc_runtimeMinimum_x64.msi 之後, 再利用 [UniExtract2] 解開所需的 dll 檔案, 最後再放入 CoppeliaSim 根目錄. 啟動時直接執行 coppeliaSim.exe 即可.

&lt;h1 id="simscene"&gt;simscene XML&lt;/h1&gt;

[CoppeliaSim] 從 [4.0.0 版]開始, 提供 [XML 檔案格式]的輸出入, 此功能允許使用者透過 [ASCII] 檔案格式建構 [CoppeliaSim] 的[場景]. 其中與機電產品開發過程中的電腦輔助設計架構最直接關聯的就是, 使用者可以直接透過程式方法, 將設計零件以 [STL] 格式輸出後, 套接在使用者所建構的機電資[場景]中. 意即: 使用者可以直接從 MCAD 套件中將組立檔案轉進具有 [joints]、[Camera]、[Vision sensors]、[Force sensors]、[Proximity sensors]與控制 [Scripts] 的模擬環境, 而無需全部採手動轉檔方式, 在 [CoppeliaSim] 圖形介面中進行組立、設定參數或配接各項模擬元件樹狀架構.

當使用者從 [CoppeliaSim] 將[場景] 存為 exhaustive sinscent [XML 檔案格式] 後, 可以利用下列 Python 程式讀出其中的標註 (總數超過 326 個), 之後再設法利用 [Leo Editor] 的 import-xml-tags data 設定解讀所有 tags 內容, 並以階層式架構呈現 :

&lt;pre class="brush: python"&gt;
# from https://stackoverflow.com/questions/29596584/getting-a-list-of-xml-tags-in-file-using-xml-etree-elementtree
import xml.etree.ElementTree as ET

def leo_print(x):
    try:
        print(x)
    except:
        g.es(x)

# load and parse the file
xmlTree = ET.parse('two_link_slvs_shaft_simple.simscene.xml')

elemList = []

for elem in xmlTree.iter():
    elemList.append(elem.tag)

# now I remove duplicities - by convertion to set and back to list
elemList = list(set(elemList))

# Just printing out the result
try:
    print(elemList)
except:
    # echo string
    g.es(elemList)

for i in elemList:
    leo_print(i)
&lt;/pre&gt;

[CoppeliaSimEdu_4.3.0_rev12.7z] (for @gm users only)

[Wix]: https://github.com/wixtoolset/wix3/releases/tag/wix3112rtm
[UniExtract2]: https://github.com/Bioruebe/UniExtract2
[CoppeliaSimEdu_4.3.0_rev12.7z]: https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/ESXbxhDmlUhBmPTUqAdTrLEBjvaqzZupKcgviAmxWGQdjQ
[CoppeliaSim]: https://www.coppeliarobotics.com/
[4.0.0 版]: https://www.coppeliarobotics.com/helpFiles/en/versionInfo.htm#coppeliaSim4.0.0
[XML 檔案格式]: https://mde.tw/pjcopsim/content/xmlFormat.html
[ASCII]: https://en.wikipedia.org/wiki/ASCII
[場景]: https://mde.tw/pjcopsim/content/scenes.html
[STL]: https://en.wikipedia.org/wiki/STL_(file_format)
[joints]: https://mde.tw/pjcopsim/content/joints.html
[Vision sensors]: https://mde.tw/pjcopsim/content/visionSensors.html
[Force sensors]: https://mde.tw/pjcopsim/content/forceSensors.html
[Proximity sensors]: https://mde.tw/pjcopsim/content/proximitySensors.html
[Camera]: https://mde.tw/pjcopsim/content/cameras.html
[Scripts]: https://mde.tw/pjcopsim/content/scripts.html
[Leo Editor]: https://www.leoeditor.com/
</t>
<t tx="leo.20220827124834.6">@language md
---
Title: 電腦輔助設計室系統更新
Date: 2022-08-24 11:00
Category: chat
Tags: 電腦輔助設計室
Slug: renew-cad-lab-software
Author: mdecycu
---

今天收到通知, 電腦輔助設計室下週要重新更新套件, 管理員問我說: 內容需要更新嗎? 我的回答是: 不用, 只要 Windows 操作系統能正常運作就行, 所有上課的套件都使用可攜模式.

[QSetup]: https://www.pantaray.com/qsetup.html

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="leo.20220827124834.7">&lt;!-- 由於 md 無法加入 id 屬性, 因此針對標題的 h1 或 h2 直皆使用 html 設定 --&gt;
&lt;h2 id="hybrid"&gt;Hybrid 模式&lt;/h2&gt;

雖然記不得是從何時開始在上課採用可攜套件模式, 但 2004 導入 NX3 時就已經採用 Portable 架構, 將程式存入隨身碟, 以 start.bat 啟動, 以 stop.bat 關閉, 所有與個人工作有關的資料與設定都可隨身帶走, 就好像擁有一台虛擬的筆電一樣, 唯一的缺點就是 USB 隨身碟的讀取速度沒有目前 Solid State 硬碟快, 因此從上學期電腦更新後, 就一直採用 Hybrid 的模式啟動套件.

2022 Fall 將所使用的 Hybrid 套件可以從 [drive.7z] 下載, 其中包含 start_ipv6.bat:

&lt;pre class="brush: jscript"&gt;
@echo off

REM 將目前隨身碟所在目錄設為變數 Disk
set Disk=%cd%\data

REM 將SSD 上的 data 目錄設為 Local
REM for cadlab
set Local=C:\2021_cadlab_portable\data
REM for c1
REM set Local=C:\compile_copsim_cd2022\data

set HomePath=%Disk%\home_ipv6
set HomeDrive=%Disk%\home_ipv6
set Home=%Disk%\home_ipv6
set USERPROFILE=%Disk%\home_ipv6

REM 將系統 Python 程式的 io 設為 utf-8
set PYTHONIOENCODING="utf-8"

set PYTHONPATH=%Local%\Python395\DLLs;%Local%\Python395\Lib;%Local%\Python395\Lib\site-packages;

set PYTHONHOME=%Local%\Python395

REM 使用 putty 設定 git ssh 連線
set GIT_SSH=%Disk%\putty\plink.exe

REM 設定跟 Python 有關的命令搜尋路徑
set path_python=%Local%\Python395;%Local%\Python395\Scripts;
set path_portablegit=%Local%\portablegit_2.31.1\bin;
set path_tcc=%Disk%\tcc;

path=%Disk%;%path_python%;%path_portablegit%;%path_tcc%;%path%;

reg.exe import %Disk%\2022_cdb.reg;

start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe

start /MIN %Disk%\wScite\SciTE.exe
start /MIN %Disk%\wScite\SciTE.exe

Exit
&lt;/pre&gt;

而 stop.bat 則為:

&lt;pre class="brush: jscript"&gt;
@echo off

taskkill /IM python.exe /F
taskkill /IM pythonw.exe /F
taskkill /IM scite.exe /F

REM 關閉 cmd 指令視窗
taskkill /IM cmd.exe /F

EXIT
&lt;/pre&gt;

[drive.7z]: ./../downloads/drive.7z

隨身攜帶的 git 倉儲
====

由於電腦輔助設計室中的電腦安裝了防寫系統, 因此使用者為了利用 Github 維護個人的倉儲, 除了使用個人的筆電, 最方便的還是隨身攜帶一個 USB 硬碟, 除了帶有常用的可攜的套件外, 還可在任何一台 Windwos 電腦中維護自己的 git 倉儲, 當然前提是, 可能要自帶合用的 portablegit 與 Python, 或者就連 NX2206 與 Coppeliasim 加上 MSYS2 都自己隨身帶著.

</t>
<t tx="leo.20220827124834.8">@language md
---
Title: 編譯 CoppeliaSim 4.3.0 rev12
Date: 2022-08-26 11:00
Category: compilation
Tags: CoppeliaSim
Slug: compile-coppeliasim-4.3.0-rev12
Author: mdecycu
---

[CoppeliaSim] 採用 C++ 與 Qt 編寫, 安裝系統則利用 [QSetup] 建立. 這裡希望編譯的是 [CoppeliaSim] 原始碼中的 [CoppeliaSimLib] 第 4.3.0 rev12 版, 是由 448 個 .cpp 編譯連結而成 coppeliaSim.dll, 檔案大小約為 9538 KB, 是 [CoppeliaSim] 套件中最重要的核心程式庫 .

[QSetup]: https://www.pantaray.com/qsetup.html
[CoppeliaSim]: https://www.coppeliarobotics.com/
[CoppeliaSimLib]: https://github.com/CoppeliaRobotics/CoppeliaSimLib

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="leo.20220827124834.9">config.pri
====

[CoppeliaSim] 自 4.2.0 版之後, 所使用的 Lua 從 5.1 [升級為 5.3], 配合設定的 config.pri 也必須修改如下:

[升級為 5.3]: https://www.coppeliarobotics.com/helpFiles/en/versionInfo.htm#coppeliaSim4.2.0

&lt;pre class="brush: jscript"&gt;
# location of boost headers:
    BOOST_INCLUDEPATH = "Y:/msys64_20210419/mingw64/include/boost"

# location of lua headers:
    LUA_INCLUDEPATH = "Y:/lua-5.3.5/src" 

# lua libraries to link:
    LUA_LIBS = "y:/lua-5.3.5/src/liblua.a" 
 
# qscintilla location:
    QSCINTILLA_DIR = "y:/QScintilla_gpl-2.11.2"

# qscintilla headers:
    QSCINTILLA_INCLUDEPATH = "$${QSCINTILLA_DIR}/include" "$${QSCINTILLA_DIR}/Qt4Qt5"
 
# qscintilla libraries to link:
    QSCINTILLA_LIBS = "$${QSCINTILLA_DIR}/libqscintilla2_qt5.dll.a" 

# Make sure if a config.pri is found one level above, that it will be used instead of this one:
    exists(../config.pri) { include(../config.pri) }
&lt;/pre&gt;

由上列 config.pri 設定檔案可以得知, 編譯 [CoppeliaSimLib] 之前, 必須要先編譯 lua-5.3.5 與 QScintilla_gpl-2.11.2, 分別取得對應的程式庫之後, 再編譯 CoppeliaSimLib.

編譯 Lua 5.3.5
----

Y:\lua-5.3.5&gt;mingw32-make mingw

可以建立 y:/lua-5.3.5/src/liblua.a

編譯 QScintilla
----

Location: Y:\QScintilla_gpl-2.11.2

Compile:

cd Qt4Qt5

qmake -o Makefile qscintilla.pro

mingw32-make

to get libqscintilla2_qt5.dll.a under release directory

編譯 CoppeliaSimLib
----

config.pri 設定修改完成後, 執行 C:\acc_430_12\CoppeliaSimLib&gt;qmake -o Makefile coppeliaSimLib.pro

接著執行 C:\acc_430_12\CoppeliaSimLib&gt;mingw32-make -f Makefile.Release

編譯結束後, 可以在 Release 目錄中建立 coppeliaSim.dll, 這是 CoppeliaSim 的主要動態連結程式庫.

下載可攜編譯系統: [compile_copsim_cd2022.7z] (for @gm users only)

下載已經完成 [CoppeliaSimLib] 編譯的檔案: [acc_430_12_compile_Lib.7z] (for @gm users only)

下載啟動 coppeliasim.exe 所需的 dlls 檔案: [dlls_for_coppeliasimlib_430_12.7z] (for @gm users only)

[compile_copsim_cd2022.7z]: https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/Eb56ldJfZl9CiPU_5sb0-_4B5scF30r6z4FTQT__aWzkEA?e=zE8eVL
[acc_430_12_compile_Lib.7z]: https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/EYC3oMxKuoRCoLXauEsjuTwBNuZA1jSFH97wFDjNoCgwVQ?e=FaHKUP
[dlls_for_coppeliasimlib_430_12.7z]: https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/ETE26Bc_aipLjwlsoeIwVAsB-jeMPCLVjPLRVnvO_No06w?e=BAL8SC

編譯 coppeliaSimClientApplication
====

[coppeliaSimClientApplication] 是呼叫 [CoppeliaSimLib] 動態連結程式庫的客戶端應用程式. 編譯時必須位於 programming 目錄中:

&lt;pre class="brush: jscript"&gt;
C:\acc_430_12\programming&gt;git clone --recurse-submodules https://github.com/CoppeliaRobotics/coppeliaSimClientApplication.git
Cloning into 'coppeliaSimClientApplication'...
remote: Enumerating objects: 170, done.
remote: Counting objects: 100% (6/6), done.
remote: Compressing objects: 100% (5/5), done.
Receiving objects:  86% (145/170)sed 4 (delta 1), pack-reused 164eceiving objects:  82% (140/1
Receiving objects: 100% (170/170), 32.92 KiB | 2.99 MiB/s, done.
Resolving deltas: 100% (100/100), done.

C:\acc_430_12\programming&gt;cd coppeliasimclientapplication

C:\acc_430_12\programming\coppeliaSimClientApplication&gt;git checkout coppeliasim-v4.3.0-rev12
Note: switching to 'coppeliasim-v4.3.0-rev12'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c &lt;new-branch-name&gt;

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 306a6c1 updated copyright

C:\acc_430_12\programming\coppeliaSimClientApplication&gt;
&lt;/pre&gt;

將 C:\acc_430_12\programming\coppeliaSimClientApplication\config.pri 修改為:

&lt;pre class="brush: jscript"&gt;
# lua libraries to link:
    LUA_LIBS = "y:/lua-5.3.5/src/liblua.a" 

# location of lua headers:
    LUA_INCLUDEPATH = "Y:/lua-5.3.5/src" 

exists(../config.pri) { include(../config.pri) }
&lt;/pre&gt;

而在建立 coppeliaSim.exe 之前, 需要再編輯 coppeliaSim_resource.rc 檔案, 下載 coppeliaSim.ico, 並且開啟 coppeliaSim.pro 中第 42 行 RC_ICONS += coppeliaSim.ico 設定, 以便將 coppeliaSim.ico 圖像編譯後放入 coppeliaSim.exe, coppeliaSim_resource.rc 設定內容如下:

&lt;pre class="brush: jscript"&gt;
#include &lt;windows.h&gt;

IDI_ICON1	ICON	DISCARDABLE	"C:/acc_430_12/programming/coppeliaSimClientApplication/coppeliaSim.ico"

VS_VERSION_INFO VERSIONINFO
	FILEVERSION 0,0,0,0
	PRODUCTVERSION 0,0,0,0
	FILEFLAGSMASK 0x3fL
#ifdef _DEBUG
	FILEFLAGS VS_FF_DEBUG
#else
	FILEFLAGS 0x0L
#endif
	FILEOS VOS__WINDOWS32
	FILETYPE VFT_DLL
	FILESUBTYPE 0x0L
	BEGIN
		BLOCK "StringFileInfo"
		BEGIN
			BLOCK "040904b0"
			BEGIN
				VALUE "CompanyName", "\0"
				VALUE "FileDescription", "\0"
				VALUE "FileVersion", "0.0.0.0\0"
				VALUE "LegalCopyright", "\0"
				VALUE "OriginalFilename", "coppeliaSim.exe\0"
				VALUE "ProductName", "coppeliaSim\0"
				VALUE "ProductVersion", "0.0.0.0\0"
			END
		END
		BLOCK "VarFileInfo"
		BEGIN
			VALUE "Translation", 0x0409, 1200
		END
	END
/* End of Version info */
&lt;/pre&gt;

接下來就可以利用 qmake 建立 Makefile.Release, 並利用 mingw32-make 建立 coppeliaSim.exe

C:\acc_430_12\programming\coppeliaSimClientApplication&gt;qmake -o Makefile coppeliaSim.pro

C:\acc_430_12\programming\coppeliaSimClientApplication&gt;mingw32-make -f Makefile.Release

可以在 release 目錄中取得 coppeliaSim.exe

[coppeliaSimClientApplication]: https://github.com/CoppeliaRobotics/coppeliaSimClientApplication

編譯 simExtDynamics
----

C:\acc_430_12\programming\simExtDynamics\build&gt;cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release

再執行:

Y:\tmp\cop410\programming\simExtUI\build&gt;mingw32-make
</t>
<t tx="leo.20220827125802.1">@language md
---
Title: 2022 Fall CP 課程
Date: 2022-08-19 11:00
Category: cp2022
Tags: cp2022-Syllabus, 計算機程式
Slug: 2022-Fall-Intro-to-computer-programming
Author: mdecycu
---

2022 Fall 計算機程式的課程進度將放在 Weblog, 並且使用 mdecycu At cycu 登記 disqus. 所有與課程相關的問題, 都希望在各週 Weblog 下方的 disqus 詢答.

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="leo.20220827125802.2">課程評分
====

cp2022 課程評分項目請參考: [syllabus]
 
&lt;h2 id="commandline"&gt;命令提示字元&lt;/h2&gt;

[cmd] (Command Line) 指令, 是 [Windows 命令] 中的一種. 常用的命令提示字元視窗中的指令包括:

[echo], [dir], [cd], [ping], [set], [rem], [start], [path], [reg], [exit], [taskkill], [powershell]

[echo]: https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/echo
[dir]: https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/dir
[cd]: https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/cd
[ping]: https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/ping
[set]: https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/set_1
[rem]: https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/rem
[start]: https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/start
[path]: https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/path
[reg]: https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/reg
[exit]: https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/exit
[taskkill]: https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/taskkill
[powershell]: https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/powershell
 
&lt;h2 id="networksetup"&gt;網路環境設定&lt;/h2&gt;
 
 由於希望能夠讓電腦輔助設計室中使用純 [IPv6] 網路設定上網, 開機啟動後, 可採管理員模式執行下列 batch file 進行[網路環境設定]:

1_ipv6_network_setup.bat 通常放在隨身碟最外部.

&lt;pre class="brush:jscript"&gt;
REM Get-ExecutionPolicy -List
REM Set-ExecutionPolicy RemoteSigned
echo "disable ipv4 and setup proxy for ipv6"
SET CurrentDir=%~dp0
%windir%\system32\reg.exe import %CurrentDir%1_2022_cadlab_network_setup.reg
REM powershell -noexit -executionpolicy bypass -File %CurrentDir%1_disable_ipv4.ps1
powershell -executionpolicy bypass -File %CurrentDir%1_disable_ipv4.ps1
exit
&lt;/pre&gt;

執行時, 需要 1_2022_cadlab_network_setup.reg 與 1_disable_ipv4.ps1 兩個檔案:

1_2022_cadlab_network_setup.reg 主要是關閉自動偵測 [proxy server], 且手動設定代理主機.

&lt;pre class="brush:jscript"&gt;
Windows Registry Editor Version 5.00

 [HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings]
 ; disable AutoDetect
"AutoDetect"=dword:00000000
"MigrateProxy"=dword:00000001
; enable Proxy
"ProxyEnable"=dword:00000001 
"ProxyHttp1.1"=dword:00000000 
"ProxyServer"="http://[2001:288:6004:17::42]:3128"
"ProxyOverride"="localhost;"
&lt;/pre&gt;

1_disable_ipv4.ps1 為 [Powershell 命令], 主要將所有網路卡上的 [IPv4] 網路設定取消 (因為現階段所安裝的某套件會啟動網路攻擊, 透過 [IPv4] 網路協定嘗試與外部網站連結取得後門權限).

&lt;pre class="brush: jscript"&gt;
Disable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip
&lt;/pre&gt;

上述相關設定檔案: [cadlab_network_setup.zip]

[syllabus]: https://mde.tw/content/cp-syllabus.html
[網路環境設定]: https://www.youtube.com/watch?v=DDIQTTk6HZs
[cadlab_network_setup.zip]: ./../downloads/cadlab_network_setup.zip
[cmd]: https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/cmd
[Windows 命令]: https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/windows-commands
[Curriculum Vitae]: https://www.thebalancecareers.com/cv-vs-resume-2058495
[Github]: https://github.com
[Powershell 命令]: https://docs.microsoft.com/zh-tw/powershell/scripting/learn/ps101/00-introduction?view=powershell-7.2
[HTML]: https://en.wikipedia.org/wiki/HTML
[css]: https://en.wikipedia.org/wiki/CSS
[Javascript]: https://en.wikipedia.org/wiki/JavaScript
[Github Pages]: https://pages.github.com/
[acp]: https://github.com/mdecycu/cmsimde/blob/4cf035f4dc75bafc2791b67e630ee34533ae50c4/up_dir/acp.bat
[IPv6]: https://en.wikipedia.org/wiki/IPv6
[IPv4]: https://en.wikipedia.org/wiki/IPv4
[OneDrive]: https://en.wikipedia.org/wiki/OneDrive
[proxy server]: https://en.wikipedia.org/wiki/Proxy_server
[template]: https://docs.github.com/en/repositories/creating-and-managing-repositories/creating-a-repository-from-a-template
[Github Classroom]: https://classroom.github.com

建立 Github 帳號
====

請尚未建立 Github 帳號的學員, 至 &lt;https://github.com/join&gt; 申請帳號. 課程評分項目將包含利用 [Github Classroom] 建立的倉儲與網站內容 (透過 invite link). 2022fall Github 帳號與學號對照的倉儲位於 &lt;https://github.com/mdecycu/studlist/tree/main/2022fall&gt;, w2 起將利用 &lt;https://ethercalc.net/&gt; 在線由各學員自行輸入, 之後若 Github 更動, 則可以透過 [Pull Requests] 提出修改請求.

建立 Onedrive 帳號
====

請尚未建立 Onedrive 帳號的學員登入 @gm 帳號後, 至 &lt;https://www.microsoft.com/zh-tw/education/products/office&gt;, 以 @gm 帳號申請 OneDrive 5TB 儲存權限. 

利用 [Github] 建立網頁
====

只要在 [Github] 倉儲中放入 [HTML], [css] 與 [Javascript], 並且設定 [Github Pages] 對應的分支, [Github] 就會給定 Github_帳號.github.io/倉儲名稱 作為網址 (各學員課程網址將為: https://mdecp2022.github.io/site-學員_Github_帳號), 以 WWW 伺服器 serve 使用者所提供的網頁內容.

除了配置在 [Github Classroom] 的課程倉儲與網頁外, 學員也可以在登入 [Github] 後, 利用 &lt;https://github.com/mdecycu/cmsite&gt; 作為 [template], 使用 &lt;https://pages.github.com/&gt; 建立個人網頁, 並利用網頁 (https://Github_帳號.github.io) 建立個人簡歷 ([Curriculum Vitae]) 網站.

維護 [Github] 上的網頁
----

在近端將動態網頁轉為靜態網頁後, [acp] 至 [Github] 倉儲.

Computer 簡介
----

以下資料取自: &lt;https://mde.tw/content/Computer.html&gt;

A computer is a digital electronic machine that can be programmed to carry out sequences of arithmetic or logical operations (computation) automatically. Modern computers can perform generic sets of operations known as programs. These programs enable computers to perform a wide range of tasks. A computer system is a "complete" computer that includes the hardware, operating system (main software), and peripheral equipment needed and used for "full" operation. This term may also refer to a group of computers that are linked and function together, such as a computer network or computer cluster.

A broad range of industrial and consumer products use computers as control systems. Simple special-purpose devices like microwave ovens and remote controls are included, as are factory devices like industrial robots and computer-aided design, as well as general-purpose devices like personal computers and mobile devices like smartphones. Computers power the Internet, which links billions of other computers and users.

Early computers were meant to be used only for calculations. Simple manual instruments like the abacus have aided people in doing calculations since ancient times. Early in the Industrial Revolution, some mechanical devices were built to automate long tedious tasks, such as guiding patterns for looms. More sophisticated electrical machines did specialized analog calculations in the early 20th century. The first digital electronic calculating machines were developed during World War II. The first semiconductor transistors in the late 1940s were followed by the silicon-based MOSFET (MOS transistor) and monolithic integrated circuit (IC) chip technologies in the late 1950s, leading to the microprocessor and the microcomputer revolution in the 1970s. The speed, power and versatility of computers have been increasing dramatically ever since then, with transistor counts increasing at a rapid pace (as predicted by Moore's law), leading to the Digital Revolution during the late 20th to early 21st centuries.

Conventionally, a modern computer consists of at least one processing element, typically a central processing unit (CPU) in the form of a microprocessor, along with some type of computer memory, typically semiconductor memory chips. The processing element carries out arithmetic and logical operations, and a sequencing and control unit can change the order of operations in response to stored information. Peripheral devices include input devices (keyboards, mice, joystick, etc.), output devices (monitor screens, printers, etc.), and input/output devices that perform both functions (e.g., the 2000s-era touchscreen). Peripheral devices allow information to be retrieved from an external source and they enable the result of operations to be saved and retrieved. 

Program 簡介
----

以下資料取自: &lt;https://mde.tw/content/Program.html&gt;

A computer program is a sequence or set of instructions in a programming language for a computer to execute. Computer programs are one component of software, which also includes documentation and other intangible components.

A computer program in its human-readable form is called source code. Source code needs another computer program to execute because computers can only execute their native machine instructions. Therefore, source code may be translated to machine instructions using the language's compiler. (Machine language programs are translated using an assembler.) The resulting file is called an executable. Alternatively, source code may execute within the language's interpreter.

If the executable is requested for execution, then the operating system loads it into memory and starts a process. The central processing unit will soon switch to this process so it can fetch, decode, and then execute each machine instruction.

If the source code is requested for execution, then the operating system loads the corresponding interpreter into memory and starts a process. The interpreter then loads the source code into memory to translate and execute each statement. Running the source code is slower than running an executable. Moreover, the interpreter must be installed on the computer. 

Python 簡介
----

以下資料取自: &lt;https://en.wikipedia.org/wiki/Python_(programming_language)&gt;, 充分了解上述內容後, 可進入 &lt;https://mde.tw/content/Python.html&gt; 開始練習如何根據需求編寫 Python 程式.

Python is a high-level, interpreted, general-purpose programming language. Its design philosophy emphasizes code readability with the use of significant indentation.

Python is dynamically-typed and garbage-collected. It supports multiple programming paradigms, including structured (particularly procedural), object-oriented and functional programming. It is often described as a "batteries included" language due to its comprehensive standard library.

Guido van Rossum began working on Python in the late 1980s as a successor to the ABC programming language and first released it in 1991 as Python 0.9.0. Python 2.0 was released in 2000 and introduced new features such as list comprehensions, cycle-detecting garbage collection, reference counting, and Unicode support. Python 3.0, released in 2008, was a major revision that is not completely backward-compatible with earlier versions. Python 2 was discontinued with version 2.7.18 in 2020.

Python consistently ranks as one of the most popular programming languages.</t>
<t tx="leo.20220827125817.1">@language md
---
Title: 建立可攜 Python 系統
Date: 2022-08-23 11:00
Category: cp2022
Tags: portable-Python
Slug: Create-a-portable-python-system
Author: mdecycu
---

這裡所謂的可攜 Python 系統, 是指能夠放入 USB 隨身碟中的 Python 解譯器. 整個過程分為三個部分. 包括 Python 核心程式, pip 以及安裝常用模組等過程.

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="leo.20220827125817.2">動機
====

由於電腦輔助設計室中的電腦配置防寫系統, 大約每半年才更新一次, 為了及時配合不同課程所需,除了使用電腦操作系統中所安裝的 Python 外, 通常建議學員自行建立可直接放入 USB 隨身碟啟動的可攜 Python 解譯系統.

使用可攜 Python 解譯系統的好處是, 可以在任何的 64 位元 Windows 操作系統中使用相同配置的 Python 解譯器. 且可同時將 portable git 與 scite 納入可攜系統, 採可攜的方式執行程式編寫, 並維護電腦輔助設計流程中所建立 github 倉儲內容.

建立步驟
====

核心程式
----

已知從 &lt;https://www.python.org/ftp/python/&gt; 可以下載各版本的 Python .msi 安裝檔案, 且所下載的 .msi 可以直接以 [msiexec.exe] 解開內容, 而不需要經過操作系統的套件安裝流程.

[msiexec.exe]: https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/msiexec

由於以下 Python 程式可以利用現有舊版的 Python 解譯器執行, 下載並解開最新版的 Python 可攜解譯器, 因此只要進入 cmd 命令視窗, 選擇所要配置 Portable Python 的目錄, 即可直接執行後完成第一階段的 Python 核心程式的配置.

這裡以 Python 3.10.6 為例, 下載並解開所需的 Python 核心程式內容:

&lt;pre class="brush: python"&gt;
import urllib.request
import os

# basic files for Python installation
py_list = ["core", "dev", "exe", "lib", "tcltk", "tools"]
# Python version
version = "3.10.6"
# location for Portable Python
path = "c:\\tmp\\Python310"
# Python msi download URL
ftp = "https://www.python.org/ftp/python/" + version + "/amd64/"
extract_path = path + "\\extract"
# create directory
try:
    os.mkdir(path)
except:
    # path exists
    pass
# get Python installation msi files and extract into target dir
for i in py_list:
    filename = i + ".msi"
    url = ftp + filename
    # download basic python msi file
    urllib.request.urlretrieve(url, path+ "\\"+ filename)
    os.system("msiexec.exe /a " + path + "\\" + i + ".msi /qb targetdir=" + extract_path)
    # delete msi file
    os.remove(extract_path + "\\" + i + ".msi")
&lt;/pre&gt;

執行結束後, path (在上述範例 path 為 "c:/tmp/Python310") 目錄中的 extract 子目錄即為可攜 Python 解譯器檔案. 

安裝 pip
----

從 &lt;https://bootstrap.pypa.io/get-pip.py&gt; 可以下載 get-pip.py 檔案, 利用前面完成的 Python 核心程式可以在可攜 Python 程式的架構下安裝 pip 工具, 但必須先讓可攜的核心程式得以運作, 這時需要安排 start.bat 與 stop.bat

安裝 pip 時, 先以 cmd 進入命令列視窗, 然後更換目錄至 get-pip.py 所在目錄後, 以 python get-pip.py 進行安裝.

&lt;pre class="brush: jscript"&gt;
Microsoft Windows [版本 10.0.19042.1706]
(c) Microsoft Corporation. 著作權所有，並保留一切權利。

C:\tmp\portable_python_3.10.6&gt;cd tmp

C:\tmp\portable_python_3.10.6\tmp&gt;python get-pip.py
Collecting pip
  Downloading pip-22.2.2-py3-none-any.whl (2.0 MB)
     ---------------------------------------- 2.0/2.0 MB 1.5 MB/s eta 0:00:00
Collecting setuptools
  Downloading setuptools-65.2.0-py3-none-any.whl (1.2 MB)
     ---------------------------------------- 1.2/1.2 MB 2.7 MB/s eta 0:00:00
Collecting wheel
  Downloading wheel-0.37.1-py2.py3-none-any.whl (35 kB)
Installing collected packages: wheel, setuptools, pip
Successfully installed pip-22.2.2 setuptools-65.2.0 wheel-0.37.1
&lt;/pre&gt;

可攜 Python 安裝 pip 後, 就可以利用 pip list 列出目前所安裝的模組, 並接著安裝 cmsimde 所需模組.

&lt;pre class="brush: jscript"&gt;
C:\tmp\portable_python_3.10.6\tmp&gt;pip list
Package    Version
---------- -------
pip        22.2.2
setuptools 65.2.0
wheel      0.37.1

C:\tmp\portable_python_3.10.6\tmp&gt;pip install flask flask_cors bs4 lxml pelican markdown leo pyopenssl
&lt;/pre&gt;

以下為用來啟動可攜 Python 的批次檔案:

start.bat

&lt;pre class="brush: jscript"&gt;
@echo off

set PATH=%cd%

set HomePath=%cd%\home_ipv6
set HomeDrive=%cd%\home_ipv6
set Home=%cd%\home_ipv6
set USERPROFILE=%cd%\home_ipv6

REM 將系統 Python 程式的 io 設為 utf-8
set PYTHONIOENCODING="utf-8"

set PYTHONPATH=%cd%\Python310\DLLs;%cd%\Python310\Lib;%cd%\Python310\Lib\site-packages;
set PYTHONHOME=%cd%\Python310

REM for putty
set GIT_SSH=%cd%\putty\plink.exe

REM 設定跟 Python 有關的命令搜尋路徑
set path_python=%cd%\Python310;%cd%\Python310\Scripts;
REM 設定跟Git 有關的命令搜尋路徑
set path_git=%cd%\portablegit_2.31.1\bin;
set path_tcc=%cd%\tcc;

REM for execute scite directly
set path_scite=%cd%\wScite502\;

path=%cd%;%path_python%;%path_git%;%path_tcc%;%path_scite%;%path%;

start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe

start /MIN %cd%\wScite502\SciTE.exe
start /MIN %cd%\wScite502\SciTE.exe

Exit
&lt;/pre&gt;

以下為關閉可攜 Python 的批次檔:

stop.bat

&lt;pre class="brush: jscript"&gt;
@echo off

taskkill /IM python.exe /F
taskkill /IM pythonw.exe /F
taskkill /IM scite.exe /F
taskkill /IM cmd.exe /F

EXIT
&lt;/pre&gt;

安裝模組
----

pip install flask flask_cors bs4 lxml pelican markdown leo pyopenssl

上述配置 pip 與模組[安裝詳細過程紀錄].

[安裝詳細過程紀錄]: ./../downloads/install_get-pip.py_and_cmsimde_modules.txt

[portable_python_3.10.6.7z] (for @gm users only)

[portable_python_3.10.6.7z]: https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/EeE98pBYWN9CkSCX6CQ4Hc0B3ATux7DfglRSGLBw2AL0cQ?e=ju1KyO</t>
<t tx="leo.20220827212236.1">@language md
---
Title: 編譯 Solvespace
Date: 2022-08-27 11:00
Category: compilation
Tags: Solvespace
Slug: compile-solvespace
Author: mdecycu
---

這裡將利用 [MSYS2] 編譯 [Solvespace].

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others
</t>
<t tx="leo.20220827212257.1">&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/OHyeZz6XE8A" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

上列影片採用 [MSYS2]  編譯  [Solvespace] 原始碼.

[MSYS2]: https://www.msys2.org/
[Solvespace]: https://github.com/solvespace/solvespace

[MSYS2] 套件中名稱帶有 mingw-w64-x86_64 表示用於 MinGW 64 bit 操作系統

更新系統核心組件:

pacman -Syu

安裝基本 C/C++ 編譯與開發工具:

pacman -S mingw-w64-x86_64-toolchain

安裝 CMake:

pacman -S mingw-w64-x86_64-cmake

編譯之前必須 rename Y:\msys64\usr\bin\sh.exe

接著就是 build solvespace.exe

以 git clone --recurse-submodules https://github.com/solvespace/solvespace.git 取下原始碼與子模組.

接下來進入倉儲後執行編譯:

cd solvespace

mkdir build

cd build

cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release

mingw32-make

cd bin

solvespace.exe 即可執行.

編譯結束後, 之所以可以直接執行 solvespace.exe 是由於先前已經在啟動可攜程式系統時設定

set path_msys2=%Disk%:\msys64_20210419\mingw64\bin;

且將 path_msys2 納入 path 命令搜尋路徑中, 因此可以直接以命令列執行 solvespace.exe, 但是若要讓 solvespace.exe 獨立執行, 則需要 libwinpthread-1.dll to execute solvespace.exe

編譯 [Range3]
====

為了 compile [Range3], [MSYS2] 除了mingw-w64-x86_64-toolchain 還必須加裝:

[Range3]: https://github.com/Range-Software/range3

pacman -Sy mingw-w64-x86_64-qt5
pacman -Sy mingw-w64-x86_64-qt5-static
pacman -Sy mingw-w64-x86_64-ffmpeg

接著編譯 [Range3]:

start Y:\msys64\mingw64.exe

cd /y/tmp/range3

./scripts/build.sh --clean &amp;&amp; ./scripts/create_package.sh

而為了讓 svg 格式的 icons 能夠正確顯示, 必須納入 Qt5Svg.dll</t>
<t tx="leo.20220828113010.1">@language md
---
Title: Git 常用指令
Date: 2022-08-28 11:00
Category: git
Tags: remote-add, recurse-submodules
Slug: useful-git-commands
Author: mdecycu
---

根據使用情境將常用的 git 指令加以整理.

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="leo.20220828113236.1">Git 簡介
====

Git 是一套分散式版次管理工具, 可在各種電腦操作系統中使用, 其目的是用來管理資料改版過程中的所有細節, 最常被用來管理程式套件的開發流程. 能夠配合 Git 使用常見的 Web based 服務有 Github, Gitlab 與 Bitbucket.

由於利用電腦輔助各種產品設計開發的過程, 不僅牽涉許多文字與數位資料, 而且通常在不同時段, 會與許多不同專業的人士進行協同設計. 過程中若沒有完善的分散版次管理系統, 比較可能產生資料紛亂, 難以追蹤問題, 且團隊成員間針對協同資料間的權利與義務不容易有效釐清.

以下列出使用 Git 分散式版次管理的優點:

1. 各開發者可以同步對同一文件或程式進行改版, 改版時無需上網
2. 所有提交的改版內容均會存檔, 一旦納入管理的資料不會丟失, 也不會查不出資料被誰改寫
3. 系統中明確儲存各階段各檔案的改版歷程

上列所謂同步開發的意思是, 只要各團隊成員了解專案的目標, 以及每次改版的動機, 就可以各自在同一時間, 直接對倉儲進行改版, 等到各成員分別將改版內容提交推送至遠端倉儲時, 若各改版內容產生衝突, 就可以依照實際需求進行處理後合併.

Git 基本概念
====

以下 Git 專有名詞說明翻譯自[這裡]:

[這裡]: https://hipert.unimore.it/people/paolob/pub/Calcolo_Parallelo/Slides/Git_Tutorial.pdf

Snapshots (快照)

1. 快照是 git 追踪資料歷程的方式
2. 快照主要是記錄所有文件在特定時間點的狀態
3. 使用者可以決定何時拍快照以及拍那些文件資料
4. 使用者能夠擷取先前所拍的任何快照

Commits (提交)

1. 對資料拍快照的動作稱為提交
2. 提交可以是動詞, 也可以是名詞, 例如: 提交這個程式, 或者已經完成幾次提交
3. 基本上改版專案就是由每次的提交所組成
4. 每一個提交都包含三種資料: 檔案的更動內容、與上一個提交的參照資料 (即所謂 parent commit)、一組 hash code (SHA-1 hashes).

其中 hash code 長得像這樣: f2d2ec5069fc6776c80b3ad6b7cbde3cade4e

Repositories (儲存庫或倉儲)

1. 可以簡寫為 repo
2. 倉儲指所有檔案與檔案改版歷程
3. 檔案改版歷程包含所有的提交
4. 倉儲資料可以存放在近端或遠端 (例如: Github 或 Gitlab)
5. 從遠端將倉儲內容取下的動作稱為 clone
6. clone 倉儲的功能, 讓多人可以協同對同一倉儲改版
7. 從遠端將倉儲之外的提交內容取下的動作稱為 pulling 改版內容
8. 將近端的改版資料納入遠端倉儲的動作稱為 push 改版內容

Branches (分支)

1. git 中的所有提交都存在某個分支上
2. 一個倉儲可以有許多的分支
3. Github 目前的主要分支稱為 main
4. 在不影響主分支內容的情況下, 可以針對特定提交切出分支進行修改

從特定提交切出分支的示意圖如下:

&lt;img src="./../images/git_branching_off.png" width="600"&gt;&lt;/img&gt;

HEAD 

HEAD 通常指 A reference to the most recent commit.

Merging (合併)

分支合併示意圖如下:

&lt;img src="./../images/git_merging_branches.png" width="600"&gt;&lt;/img&gt;

如何提交?

1. 在近端電腦上的資料版本稱為 Working Directory (工作目錄)
2. 準備將已經修改完的資料納入特定提交的動作稱為 Staging (暫存)
3. 將修改後的檔案放入暫存檔的指令為 git add, 可以利用 git add file.txt 暫存單一檔案或 git add . 暫存所有已經修改的檔案
4. 改版檔案進入暫存區之後, 可利用 git commit -m 加上提交字串完成提交, 意即對這些檔案拍快照 (Snapshots)

git add . 之後執行 git commit -m "提交說明訊息" 的流程示意圖如下:

&lt;img src="./../images/git_commit_process.png" width="600"&gt;&lt;/img&gt;

Rebasing、Revert and Cherry picking

Rebase (資料取自 &lt;https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase&gt;)

What is git rebase? From a content perspective, rebasing is changing the base of your branch from one commit to another making it appear as if you'd created your branch from a different commit. Internally, Git accomplishes this by creating new commits and applying them to the specified base.

以下為 git rebase 示意圖:

&lt;img src="./../images/git_rebase.png" width="600"&gt;&lt;/img&gt;

Revert: &lt;https://www.atlassian.com/git/tutorials/undoing-changes/git-revert&gt;

Git cherry pick: &lt;https://www.atlassian.com/git/tutorials/cherry-pick&gt;

remote add
====

git remote add 的使用情境是希望將某一個倉儲的完整歷程資料, 改存至另一個倉儲.

假設原來的 cad2021_final 倉儲位於 mdecourse 帳號下, 現在想要將此倉儲的完整歷程資料, 轉存至 mdecycu 帳號下.

先前準備: 要先在近端電腦設定好 mdecourse 與 mdecycu 對 git 的 [SSH 公私鑰簽章設定]. 且 mdecourse 對應的 putty session 為 github.com, 而 mdecycu 對應的 putty session 為 mdecycu.

[SSH 公私鑰簽章設定]: https://mde.tw/content/Token%20and%20SSH.html#ssh

步驟一:  登入 github.com mdecycu 帳號, 建立一個空的 cad2021_final 倉儲, 也就是連 README.md 都先不加入的完全空的倉儲.

步驟二: 將 cad2021_final 從 mdecycu 帳號下, git clone 至近端電腦.

git clone --recurse-submodules git@github.com:mdecourse/cad2021_final.git

因為 cad2021_final 倉儲在 mdecourse 帳號下設為 private, 因此需要透過 putty session github.com, 利用近端的 puttygen 所建立的 .ppk private key 與 github 上 OpenSSL 格式的 public 對應下, 才能夠透過 ssh 協定取下 cad2021_final 倉儲.

步驟三: cd 至 cad2021_final 倉儲目錄, 以 git remote add 設定代號, 並對應至 mdecycu 帳號下的同名倉儲.

git remote add mdecycu git@mdecycu:mdecycu/cad2021_final.git

其中的 git remote add 為指令, 表示要加入一個遠端的連結代號, 而此代號名稱為 mdecycu, 隨後的 git@ 表示要利用 ssh 協定, 以 git 作為登入帳號, @ 後面的 mdecycu 為近端 putty 的 session 名稱, 而 :mdecycu 中的 mdecycu 則是 github 系統下的 mdecycu 帳號用戶名稱, /cad2021_final.git 則為先前已經建立的空倉儲.

步驟四: 將 cad2021_final 倉儲內容, 以 git push 推送到 mdecycu 帳號下.

git push mdecycu

recurse-submodules
====

當使用 git clone 倉儲時, 之所以要宣告 --recurse-submodules 選項命令, 是針對該倉儲的所有子模組, 包括子模組下的所有子模組, 也要同時取下.

submodule add
====

git submodule add 隨後要加入 URL 指向某一倉儲, 表示要將該倉儲設為子模組, 然後指令還要再加上該子模組連結的對應代號.

git submodule add https://github.com/mdecycu/cmsimde.git cmsimde

表示要將 cmsimde 倉儲設為子模組, 且放入 cmsimde 目錄中.

Git 參考資料
====

1. &lt;https://git-scm.com/book/zh-tw/v2&gt;
2. &lt;https://www.tutorialspoint.com/git/git_tutorial.pdf&gt;
3. &lt;https://people.irisa.fr/Anthony.Baire/git/git-for-beginners-handout.pdf&gt;
3. &lt;https://indico.cern.ch/event/724719/contributions/2981043/attachments/1638054/2754736/Git_tutorial.pdf&gt;
4. &lt;https://hipert.unimore.it/people/paolob/pub/Calcolo_Parallelo/Slides/Git_Tutorial.pdf&gt;

</t>
<t tx="leo.20220901020048.1">@language md
---
Title: Windows 常用指令
Date: 2022-09-01 11:00
Category: windows
Tags: batch, commands
Slug: useful-windows-commands
Author: mdecycu
---

根據使用情境將常用的 Windows 指令加以整理.

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="leo.20220901020212.1">密碼最長使用期限
====

Windows 10 [密碼最長使用期限] 內定為 42 天, 假如此一設定對使用者造成困擾, 可以從系統管理者執行的 cmd 中, 輸入 secpol.msc 開啟 [本機安全性設定], 開啟"帳戶原則"中的"密碼原則", 然後將"密碼最長使用期限"從內定的  42 天改為 0, 表示密碼永不過期.

[密碼最長使用期限]: https://docs.microsoft.com/zh-tw/windows/security/threat-protection/security-policy-settings/maximum-password-age
[本機安全性設定]: https://mitblog.pixnet.net/blog/post/40807765-%5Bwindows%5D-%E6%9C%AC%E6%A9%9F%E5%AE%89%E5%85%A8%E6%80%A7%E5%8E%9F%E5%89%87%28secpol.msc%29%E3%80%81%E7%BE%A4%E7%B5%84%E5%8E%9F%E5%89%87</t>
<t tx="leo.20220901021551.1">@language md
---
Title: 有關 TCExam
Date: 2022-09-01 12:00
Category: tcexam
Tags: exam, php, pgsql, nginx
Slug: about-tcexam
Author: mdecycu
---

這裡將收集與 TCExam 有關的資料內容.

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="leo.20220901021609.1">虛擬主機上的 TCExam
====

相關程式檔案放在 c:\tcexam, 管理者帳號設為 tcexam. 啟動 exam.網域.名稱, 牽涉 nginx, php, pgsql 以及 tcexam 程式原始碼.

nginx 主要負責將 http 跳轉至 https, 並且透過 fastcgi 啟動 php 解譯器的執行. 而 nginx 的 server 設定範例如下:

&lt;pre class="brush: jscript"&gt;
server { 
    listen    98 ssl;
    listen    [::]:98 ssl;
    
    root c:/tmp/TCExam;

    server_name    exam.網域.名稱;
    ssl_certificate    C:/pj2022/stunnel/config/fullchain.pem;
    ssl_certificate_key    C:/pj2022/stunnel/config/privkey.pem;
    ssl_protocols    TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers    HIGH:!aNULL:!MD5;
    
    location /{ 
        index index.html index.php;
    }
    
    location ~ \.php$ {
        fastcgi_pass   127.0.0.1:9123;
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
        include        fastcgi_params;
    }
}
&lt;/pre&gt;

pgsql 以手動 start.bat 啟動, 設定檔案如下:

&lt;pre class="brush: jscript"&gt;
@echo off
set /p DATA=&amp;lt;PGDATA.txt
cd %~dp0
bin\postgres -V
bin\pg_ctl -D %DATA% -l logfile.txt start
&lt;/pre&gt;

其中的 PGDATA.txt 內容為 .\data, 表示資料庫內容存在 .\data 目錄中.

一旦考試結束後, 以 stop.bat 關閉 pgsql:

&lt;pre class="brush: jscript"&gt;
@echo off
set /p DATA=&amp;lt;PGDATA.txt
cd %~dp0
bin\pg_ctl -D %DATA% -l logfile.txt stop
&lt;/pre&gt;

TCExam 原始碼
====

由於目前所啟動的線上 TCExam 採用 2022.06.9 釋出的 PHP 8.1.7 版, 而 &lt;https://github.com/tecnickcom/tcexam&gt; 最近修改日期為 2021.08.05, 因此直接從 TCExam github 網站 clone 下來的原始碼無法在最新版的 PHP 解譯環境中執行.

因此啟動修改 TCExam, 令其可以在 PHP 8.1.7 中執行, 且 pdf 轉檔的部分, 也自行建立中文字型, 以便正確將考試內容轉為中英並存的格式.

目前尚未完成的設定為 send mail 的部分.

總結上述說明, 要啟動 TCExam 考試系統, 必須確認 nginx 已經啟動, 然後手動執行 pgsql 目錄下的 start.bat, 並且注意 c:\certbot 目錄下有關 https 數位簽章每 90 天必須設法手動或自動更新.

CYCU TCExam 主機
====

目前 exam dot cycu dot org 採用 10ff:1:0::1 設定, 使用 8GB 虛擬主機測試是否合用. 目前透過 nginx 管制, 只允許系上 IPv6 網段連線.
</t>
<t tx="leo.20220901223644.1">@language md
---
Title: cp2022_w1
Date: 2022-09-01 13:00
Category: cp2022
Tags: w1, portable python, 計算機程式
Slug: cp2022-w1
Author: mdecycu
---

計算機程式課程第一週, 只有 1b 有課, 1a 因為中秋節放假.

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="leo.20220901223953.1">電腦系統
====

目前電腦輔助設計室中絕大部分的電腦都只有一個磁區 (假如有三個磁區的電腦是上一代的舊電腦), 使用的操作系統是 Windows 10, 因為系上有四門課程在電腦輔助設計室上課時, 採用的是純 [IPv6] 網路連線, 因此各位學員在接觸到計算機程式課程時, 必須學會設定電腦系統的網路連線.

[IPv4] 與 [IPv6]
----

[IPv4] 與 [IPv6] 是兩種不相容的網路協定. 目前除了計算機程式課程, 還有網際內容管理、電腦輔助設計與實習以及協同產品設計實習等課程, 上課時都將電腦輔助設計室的連外網路直接與系上主幹連接. 目的是希望擴大每一台電腦的網路頻寬, 可以無需透過 [NAT] 轉址後再連接到系上.

但是這樣做, 所要付出的代價是, 首先, 每一台電腦都直接以 [IPv6] 外部網路位址與網際網路相通, 若此時電腦中的 [IPv4] 也同時開啟的話, 安裝在操作系統中的某些軟體會以為已經取得 [IPv4] 的外部網路位址 (其實並沒有, 因此系上已經沒有額外的外部 [IPv4] 網路位址), 而啟動網路攻擊. 因而導致操作系統所安裝的防毒軟體作動, 關閉電腦的所有對外網路連線, 亦即, 當電腦輔助設計室網路線直接連到主幹時, 要設法關閉 [IPv4] 網路連線, 否則無法使用網路.

其次, [IPv6] 網路協定雖然已經逐漸普及, 但目前仍有許多網站只支援 [IPv4] 網路協定, 因此在純 [IPv6] 網路設定下, 若要連接至某些只支援 [IPv4] 的電腦或網站, 必須透過代理主機.

學習議題
----

為什麼會有 [IPv4] 與 [IPv6] 兩種網路協定並存?

上計算機程式課程時, 當使用瀏覽器與執行 git 指令時, 該如何正確設定網路協定?

[IPv4]: https://zh.wikipedia.org/zh-tw/IPv4
[IPv6]: https://zh.wikipedia.org/zh-tw/IPv6
[NAT]: https://en.wikipedia.org/wiki/Network_address_translation
[這裡]: https://mde.tw/content/Python.html
[Brython]: https://brython.info/
[網路設定]: https://mde.tw/blog/2022-Fall-Intro-to-computer-programming.html#networksetup

&lt;h1 id="learnbrython"&gt;線上學習 Brython&lt;/h1&gt;

當你完成電腦輔助設計室中的[網路設定]後, 就可以利用瀏覽器連線到[這裡], 直接在線上學習 [Brython].

學員課程網頁
====

cp2022 課程中的 cp 為 computer programming 的縮寫, 每一位學員各自建立 Github 帳號後, 將在 &lt;https://ethercalc.net/&gt; 中登錄用於課程的 Github 帳號. 之後將配合 Github Classroom 建立學員課程網頁. 此一網頁倉儲分為靜態與動態等兩個部分, 靜態網頁是配合 Github Pages, 直接由 Github.com 提供對應網址, 而動態網頁則可在近端用於網站內容編輯改版, 也可以在 Windows 或 Ubuntu 操作系統中進行配置, 成為可多人協同維護的網際內容管理系統.

完成配置後的學員課程網頁, 將位於組織 (organization) 名稱為 mdecp2022 的帳號下, 且倉儲名稱將為: site-個人帳號名稱 (site 為 assignment 名稱). 至於個人 Github 帳號與學號的對應關聯則將登錄於 &lt;https://github.com/mdecycu/studlist/tree/main/2022fall&gt; 目錄中的班級對應檔案.

建立個人課程網頁示範:

有關筆記型電腦
====

綜一館八樓的電腦輔助設計室所配置的 PC, 雖然裝有還原卡, 但只要配合 USB 隨身碟與可攜套件, 應該足以應付 cp2022 計算機程式課程所需. 所以一般並不建議大一就購買筆記型電腦, 而是先善用系上所提供的 PC. 至於課外使用時段, 請參考系上電腦教室借用規定辦理, 通常週四與週五晚間未排課時段可以外借.

至於符合機械設計工程系需求的筆記型電腦, 一般建議 i7 等級以上, 16 GB 記憶體, 並配置中階以上獨立顯卡. Windows 操作系統則建議使用專業 (Professional) 以上版本.

校外電腦連接部分, 則需要每學年申請 VPN 使用授權, 下載學校購買的軟體或電子書, 只要設定校內 Proxy 即可, 但若要連網認證 SolidWorks 或 Matlab, 則需透過校內 VPN 連網.

</t>
<t tx="leo.20220902013935.1">@language md
---
Title: 有關 NX
Date: 2022-09-02 11:00
Category: NX
Tags: Siemens
Slug: about-nx
Author: mdecycu
---

這裡將收集與 NX 有關的資料內容. Siemens NX 在 2022.09.01 釋出最新版本為 NX2206.4020, 幾乎同步釋出的 NX2027 最新版本則為 build 3401. cd2022 電腦輔助設計與實習將使用 NX2027.3401 可攜版本.

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="leo.20220902013945.1">Recent Opened Files
----

啟動 NX 時將 HOME 以及 UGII_TMP_DIR 設定至 Temp 子目錄後, Recent Opened Files 資料會存入 Temp 目錄, 當 NX 啟動後, 會將資料轉存至 電腦\HKEY_CURRENT_USER\SOFTWARE\Unigraphics Solutions\NX\2027\General\Parts\Recent, 若希望刪除此類資料, 則必須在重新啟動 NX 之前, 分別刪除 Temp 目錄下的所有檔案, 並以 regedit 進入將 Recent 項目下的 Native 機碼刪除.

以下為啟動 NX 時所設定的環境變數:

&lt;pre class="brush: jscript"&gt;
set HOME=%cd%\Temp
set UGII_TMP_DIR=%cd%\Temp\
&lt;/pre&gt;

NX 繪圖與組立
----

基本的 NX2027.3401 繪圖與組立, 只需要下列目錄:

&lt;pre class="brush: jscript"&gt;
DESIGNSPACEEXPLORER : 7.31 KB
DESIGN_TOOLS : 275.8 MB
DIAGRAMCORE : 5.81 MB
DIAGRAMMING : 64.65 MB
DRAFTING : 123.65 MB
DXFDWG : 206.79 MB
IGES : 5.2 MB
INSTALL : 55.55 KB
MECHATRONICS : 212.81 MB
NXASSEMBLY : 120.98 MB
NXBIN : 5.07 GB
NXPARTS : 53.76 MB
STEP203UG : 1.28 MB
STEP214UG : 1.27 MB
temp : 0B
TRANSLATORS : 157.87 MB
UGFLEXLM : 29.4 MB
UGII : 677.93 MB
UGMANAGER : 117.29 MB
UGOPEN : 425.32 MB
UGOPENPP : 567.28 KB
UNFOLD : 71.92 KB
total: 7.49 GB
&lt;/pre&gt;

&lt;h1 id="siemenssupportcenter"&gt;Siemens Support Center&lt;/h1&gt;

從 &lt;https://support.sw.siemens.com/en-US/&gt; 下載檔案後, 可以利用 certutil 工具驗證檔案.

驗證下載檔案:

使用工具: &lt;https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/certutil&gt;

指令: certutil -hashfile SiemensNX-2027.3401_wntx64.zip SHA512

SHA512 hash: f180a6c97b9599af0bc6068d344eeb8ea065f79648f64fea9c782fd41e00e430e04aad85c0d09705071c60ea9493c9e75f39e8bf0f22660c3dcb6cbc7819274a

&lt;h1 id="portablenx"&gt;Portable NX&lt;/h1&gt;

在 Windows 10 配置可攜 NX2027.3401 程式, 需要:

&lt;https://github.com/Bioruebe/UniExtract2&gt;

&lt;https://github.com/wixtoolset/wix3/releases/tag/wix3112rtm&gt;

等兩項工具, UniExtract2 用來解開 SiemensNX-2027_wntx64\nx\SiemensNX.msi, 以及 .msi, 而 wix 則用來解開 SiemensNX-2027_wntx64\nx\VC_redist.x64.exe, 指令為:

wix311-binaries\dark.exe vc_redist.x64.exe -x x64-extracted

表示要在 x64-extracted 目錄中取得 x64-extracted\AttachedContainer\packages\vcRuntimeMinimum_amd64\vc_runtimeMinimum_x64.msi 之後, 再利用 UniExtract2 解開所需的 dll 檔案後, 再放入 NXBIN 目錄.

製作 Portable NX2207 的步驟請參考以下影片(以 NX1980 為例):

解開 SiemensNX.msi 合計得到 151803 個檔案, 而將 VC_redist.x64.exe 解開後的 52 個 dll 檔案放入 NXBIN 目錄中.

&lt;script&gt;
var winkVideoData = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 接下來將 mp4 檔案從 downloads 目錄取出 --&gt;
&lt;div class="winkVideoContainerClass"&gt;&lt;video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="./../cmsimde/static" data-varname="winkVideoData" height="630" muted="true" width="1008"&gt;
&lt;source src="./../downloads/w5_portable_nx1980.mp4" type="video/mp4"/&gt;&lt;/video&gt;&lt;/div&gt;
&lt;br /&gt;

完成 NX2027.3401 可攜系統製作後, 各目錄檔案容量如下:

&lt;pre class="brush: jscript"&gt;
AUTOMATED_TESTING : 1.52 MB
AUTOMATION_DESIGNER : 254.08 MB
CAPITALINTEGRATION : 2.04 MB
CATIAV5 : 784.01 KB
CLOUDDM : 31.07 KB
CMM_INSPECTION : 143.31 MB
DESIGNSPACEEXPLORER : 7.31 KB
DESIGN_TOOLS : 275.8 MB
DIAGRAMCORE : 5.81 MB
DIAGRAMMING : 64.65 MB
DRAFTING : 123.65 MB
DXFDWG : 206.79 MB
IGES : 5.2 MB
INSTALL : 55.55 KB
LOCALIZATION : 1.09 GB
MACH : 1.96 GB
MANUFACTURING_PLANNING : 141.66 MB
MBD : 54.05 MB
MECH : 793.28 MB
MECHATRONICS : 212.81 MB
MENDIXREPORTING : 1.04 MB
MOLDCOOLING : 12.28 KB
MOLDWIZARD : 226.71 MB
MPA : 1.5 MB
NXAECDESIGN : 15.48 KB
NXASSEMBLY : 120.98 MB
NXBIN : 5.04 GB
NXCABLEROUTER : 190.45 KB
NXCAE_EXTRAS : 2.36 GB
NXCOATINGS : 645.3 KB
NXCREO : 6.17 MB
NXHUMAN : 247.51 MB
NXJOIN : 16.38 MB
NXNASTRAN : 2.93 GB
NXPARTS : 53.76 MB
NXPLOT : 151.34 MB
NXPROE : 6.17 MB
NXREPORTS : 9.42 MB
NXSHIP : 359.0 MB
NXSTRUCTUREDESIGN : 106.47 MB
NXVR : 441.53 MB
NX_VSA : 13.88 MB
OCCUPANTSAFETY : 514.74 MB
POSTBUILD : 37.65 MB
PSTUDIO : 35.5 MB
PVTRANS : 102.46 KB
REL_INFO : 36.92 KB
ROUTING : 315.47 MB
RULE : 316.7 KB
SIMULATION : 4.19 GB
STAGE_MODEL : 3.53 MB
STAMPING_TOOLS : 77.06 MB
STEP203UG : 1.28 MB
STEP214UG : 1.27 MB
TDP : 237.62 MB
TOOLING_BASE : 970.0 KB
TRANSLATORS : 157.87 MB
UGALLIANCE : 82.9 KB
UGAUTOMOTIVE : 99.41 MB
UGCATIA : 6.53 MB
UGFLEXLM : 29.4 MB
UGFPCD : 35.19 KB
UGII : 677.93 MB
UGIMW : 8.45 MB
UGMANAGER : 117.29 MB
UGOPEN : 425.32 MB
UGOPENPP : 567.28 KB
UGPCBX : 3.42 MB
UGPCBXCHANGE : 90.23 MB
UGPHOTO : 2.98 GB
UGSTRUCTURES : 735.35 MB
UGSTUDIO : 14.03 MB
UGTIPS : 278.35 MB
UGTO2D : 911.38 KB
UGWEB : 9.08 MB
UGWELD : 2.07 MB
UNFOLD : 71.92 KB
VDA : 25.44 KB
VDV : 13.11 KB
total: 28.29 GB
&lt;/pre&gt;

請注意: 新版 NX 所建立的零組件無法由舊版的 NX 開啟.

下載 [NX12.0.2.9_lite_cad2022.7z] (for @gm users only, 1.20 GB, 解開後 6.24 GB)

下載 [NX2027.3401_lite_cad2022.7z] (for @gm users only, 1.97 GB, 解開後 7.49 GB)

下載 [NX2027.3401_cad2022.7z] (for @gm users only, 8.02 GB, 解開後 28.32 GB)

[NX12.0.2.9_lite_cad2022.7z]: https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/Eb7GeAUGMANEkijnWXGNH60BltYzKwkkffas3JhzgwnmxQ?e=K4HKXF
[NX2027.3401_lite_cad2022.7z]: https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/EfvS63_7udVPhe-xlXrYPCMBVTUEEona5_QXwHdZD_8Vww?e=LNczOS
[NX2027.3401_cad2022.7z]: https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/EfC-9gy1PN9MmJtpD9VO5KcB3kehP6VVVgmQt3ej5D_BIQ?e=deXuWs
[NX2007 EN Documentation]: https://docs.sw.siemens.com/en-US/release/209349590/NX%202007%20Series
[NX2007_documentation.7z]: https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/EU-fmibMpBZKg2ZiXmBlK-oBQj7wLV5YeMGI8rCI60NhmQ?e=EuxlyD

&lt;h1 id="nx2007doc"&gt;NX2007 Documentation&lt;/h1&gt;

2022.09 &lt;https://support.sw.siemens.com/en-US/&gt; 只提供 NX2206 與 NX2007 的 Documentation, 這裡將採用 NX2007 的英文手冊.

下載 [NX2007_documentation.7z] (for @gm users only, 2.18 GB, 解開後 2.86 GB), 使用時執行 start_static.py 後, 以瀏覽器 http://localhost:7443 開啟. 也可以透過 &lt;http://c1.cycu.org:88&gt; 查看內容.

線上 [NX2007 EN Documentation]

滑鼠
====

LMB - 滑鼠左鍵, 一般元件選擇, 可以連續使用滑鼠左鍵選擇多個元件

Shitf + LMB - 可以去除利用滑鼠左鍵已經選擇的元件

RMB - 滑鼠右鍵, 在視圖空白按住滑鼠右鍵, 可以帶出相關 menu

MMB - 滑鼠中鍵, 單擊表示 confirm 確認, 按住中鍵移動則可以旋轉觀測視圖 (rotate), 前後滑動中鍵則可放大縮小觀測視圖 (zoom in or out)

MMB + RMB - 同時按住滑鼠中鍵與右鍵後移動, 可以平移觀測視圖 (pan), 相同功能也可以同時按住 Shift 與滑鼠中鍵後移動滑鼠, 以執行 pan 動作

ESC - 取消

F4 - 帶出上一個執行功能

F6 - Zoom, 以滑鼠左鍵在視圖中選擇放大的區域

F7 - Rotate, 進入此功能後, 可以使用任一滑鼠鍵移動, 執行旋轉視圖功能

F8 - Snap view, 轉到與目前視圖最接近的正向視圖

Ctrl + f - Fit

Ctrl + l - Layer Settings

Layers
====

NX 提供 256 個圖層 (Layers)

layers objects

1 - 20 solids

21 - 40 sketches

41 - 60 curves

61 - 80 reference elements

81 - 100 faces

101 - 120 PMI

Ctrl + l - Layer Settings









</t>
<t tx="leo.20220903232957.1">@language md
---
Title: 有關 Github Classroom
Date: 2022-09-03 11:00
Category: Github
Tags: Classroom
Slug: about-classroom
Author: mdecycu
---

這裡將收集與 Github Classroom 有關的資料內容. 

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="leo.20220903233110.1">Github Classroom
====

登入 Github 帳號, 並連線至 &lt;https://classroom.github.com/&gt; 後, 選擇 Sign in and Get Started, 就可以加入 Github Classroom: &lt;https://github.com/education/classroom&gt;. 授權讓 classroom 程式管理 organization 帳號下的所有倉儲, 其中最重要的功能就是, 可以由管理者管控是否 enable invite link, 讓取得連結的學員參與作業與專案倉儲管理, 並且可以透過 organization 中的 Member privileges 設定讓使用者建立 Github Pages, 但限制其刪除 organization 下作業倉儲的權限..

加入 Github classroom 後, 將跳出相關說明: A classroom is a space where you can create assignments, collaborate with teaching assistants, and invite students in a single course.

由於 GitHub Classroom uses organization accounts to manage permissions, administration, and security for classrooms. You can create a Classroom in any organization you own.

意即, 當 Github 使用者加入 Github Classroom 之後, 就可以透過該帳號下的 organization 來新增 assignments 或協同 project, 當該 orgainzation 的管理者透過 Github Classroom 設定 assignment 之後, 該 assignment 就會產生一組 invite link 網址, 且與管理者所選定的倉儲作為 template 之後, 任何 Github 用戶只要連結到該 assignment 對應的網址, 並且同意加入後, 就可以在該 assignment 權限設定下讓用戶對倉儲擁有管理權.

假設該作業倉儲名稱為 site, 且使用者帳號名稱為 scrum-2, 則納入該 assignment 後, 就會在 organization 名稱下建立一個名稱為 site-scrum-2 的倉儲, 而先前所使用的 template 若為 cmsite, 則該選定接受 assignment 的使用者就可以全權管理該作業倉儲. 一旦學員將倉儲設定 Github Pages 對應分支後, 該作業網址將為: https://organization_名稱.github.io/site-scrum-2

invite link 時效
----

當所有修課學員都參與指定作業後, 可以進入 assignment 設定, 取消 invite link.

學員作業倉儲權限
----

當課程中止, 由於學員僅具備管理作業倉儲改版與 Github Pages 設定權限, 因此可以永久保留該學員所繳交的作業倉儲內容.

Github Classroom 功能
====

&lt;https://github.com/education/classroom&gt; 採用 Ruby 編寫, 是一套輔助教學的 Web-based 程式, 其功能如下:

1. 利用管理者的 organization 當作 Github 帳號, 以 invite link 讓學員自行建立 assignment 或 協同 project 倉儲.
2. assignment 倉儲的 template 可由管理者指定, 且學員對 assignment 倉儲所具備的管理權限, 可由管理者事前統一設定.
3. 管理者可以控制學員所建立的 assignment 倉儲, 令其無法 delete, 因此課堂結束後管理者仍可完整保留學員的課程倉儲.
4. 當管理者賦予學員對 assignment 倉儲擁有 admin 權限後, 學員可自行啟用倉儲的 Github Pages 功能, 利用倉儲內容建立課程網站.

</t>
<t tx="leo.20220907072921.1">@language md
---
Title: 有關 Wink
Date: 2022-09-07 11:00
Category: Wink
Tags: mp4, ffmpeg, javascript
Slug: about-wink
Author: mdecycu
---

這裡將收集與 Wink 有關的資料內容. Wink 是一套製作電腦操作展示的 freeware. 從 3.0 版之後, 所製作的教學影片以 ffmpeg 存為 mp4 格式, 並透過 Javascript 在網頁上與使用者進行互動.

&lt;!-- PELICAN_END_SUMMARY --&gt;

@others</t>
<t tx="leo.20220907093741.1">Wink 下載
====

Wink 3.0 可直接從 &lt;https://www.debugmode.com/wink/&gt; 下載. ffmpeg.exe 則可從[這裡]下載.

[這裡]: https://github.com/BtbN/FFmpeg-Builds/releases

每一個 wink 影片嵌入網頁時, 在同一頁面下的多個影片檔案, 都要有獨一的 data-varname 變數名稱, 在 cmsimde 架構下:
data-dirname 動態網頁 - 使用 /static

靜態網頁 - 使用 ./../cmsimde/static

然後動態網頁 mp4 video 標註 src - 使用 /downloads/影片名稱.mp4

靜態網頁 mp4 video 標註 src - 使用 ./../downloads/影片名稱.mp4

在 Blog 架構下, 則一律先將 .mp4 檔案 acp (git add, git commit and git push) 至 Github 倉儲後, 再使用靜態網頁連結 .mp4 與 data-dirname 設定.

以下為兩個 Wink3 官方釋出的 Tutorial (已經全數刪除原先的 buttons, 並直接使用 html5 的 video controls):

Tutorial1:

&lt;script&gt;
var winkVideoData_tutorial1 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 接下來將 mp4 檔案從 downloads 目錄取出 --&gt;
&lt;div class="winkVideoContainerClass"&gt;&lt;video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="./../cmsimde/static" data-varname="winkVideoData_tutorial1" height="600" muted="true" width="800"&gt;
&lt;source src="./../downloads/wink_tutorial/tutorial1.mp4" type="video/mp4"/&gt;&lt;/video&gt;
&lt;/div&gt;

Tutorial 2:

&lt;!-- 每一個 wink 影片都要有獨立的 data-varname 變數名稱
data-dirname 則區分動態網頁 - 使用 /static
與靜態網頁 - 使用 ./../cmsimde/static
然後動態網頁 mp4 - 使用 /downloads/影片名稱.mp4
與靜態網頁 - 使用 ./../downloads/影片名稱.mp4
 --&gt;
&lt;script&gt;
var winkVideoData_tutorial2 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 接下來將 mp4 檔案從 downloads 目錄取出 --&gt;
&lt;div class="winkVideoContainerClass"&gt;&lt;video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="./../cmsimde/static" data-varname="winkVideoData_tutorial2" height="600" muted="true" width="800"&gt;
&lt;source src="./../downloads/wink_tutorial/tutorial2.mp4" type="video/mp4"/&gt;&lt;/video&gt;&lt;/div&gt;

上述嵌入 Tutorial1 Wink3 mp4 影片的超文件內容如下:

&lt;pre class="brush: html"&gt;
&amp;lt;script&amp;gt;
var winkVideoData_tutorial1 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;!-- 接下來將 mp4 檔案從 downloads 目錄取出 --&amp;gt;
&amp;lt;div class="winkVideoContainerClass"&amp;gt;&amp;lt;video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="./../cmsimde/static" data-varname="winkVideoData_tutorial1" height="600" muted="true" width="800"&amp;gt;
&amp;lt;source src="./../downloads/wink_tutorial/tutorial1.mp4" type="video/mp4"/&amp;gt;&amp;lt;/video&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;br \&amp;gt;
&lt;/pre&gt;</t>
<t tx="yen.20170108171605.1"></t>
<t tx="yen.20170108171605.2">QTreeWidget {
    /* These apply to the selected item, but not to editing items.*/
    background-color: #ffffec; /* Leo's traditional tree color */
    selection-color: black; /* was white */
    selection-background-color: lightgrey;
    /* font-family: SansSerif; */
    /*font-family: DejaVu Sans Mono;*/
    font-family:YaHei Mono;
    /* 標題字型大小設定 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
 }

/* Headline edit widgets */
QTreeWidget QLineEdit {
    background-color: cornsilk;
    selection-color: white;
    selection-background-color: blue;
    /*font-family: DejaVu Sans Mono;*/    
    font-family:YaHei Mono;
    /* 沒有特別對應字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The log panes */
QTextEdit {
    background-color: #f2fdff;
    selection-color: red;
    selection-background-color: blue;
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* log font 大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The body pane */
QTextEdit#richTextEdit {
    background-color: #fdf5f5; /* A kind of pink. */
    selection-color: white;
    selection-background-color: red;
    /*font-family: DejaVu Sans Mono;*/
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* 內文字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

QLabel {
    font-family:YaHei Mono;'CherryPy', 'pytz', 'mako', 'beautifulsoup4', 'pymysql', 'peewee'
    /* 下方的 Minibuffer 標題字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

/* Editor labels */
QLineEdit#editorLabel {
    background-color: #ffffec;
    font-family:YaHei Mono;
    /* 沒有直接對應字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
    border: 2px;
    margin: 2px;
}</t>
<t tx="yen.20170108171605.3">horizontal: body pane to the left
vertical: body pane on the botton</t>
<t tx="yen.20170108171733.1"></t>
<t tx="yen.20170108171733.2">@language python
import os

os.system("pelican markdown -o blog -s local_publishconf.py")
g.es("admin pelican 近端執行完畢")


</t>
<t tx="yen.20170108171733.5"></t>
<t tx="yen.20170108171733.71"></t>
<t tx="yen.20170108171733.81"></t>
<t tx="yen.20170108171733.83">sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout localhost.key -out localhost.crt

</t>
<t tx="yen.20170108171930.1">@language python
import os
import subprocess
import threading
import http.server, ssl

def domake():
    # build directory
    os.chdir("./../")
    server_address = ('localhost', 5443)
    httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)
    httpd.socket = ssl.wrap_socket(httpd.socket,
                                   server_side=True,
                                   certfile='localhost.crt',
                                   keyfile='localhost.key',
                                   ssl_version=ssl.PROTOCOL_TLSv1)
    print(os.getcwd())
    print("5443 https server started")
    httpd.serve_forever()

# 利用執行緒執行 https 伺服器
make = threading.Thread(target=domake)
make.start()</t>
<t tx="yen.20170108171939.1">@language python
import os
import subprocess
import threading
import socket
import http.server, ssl

class HTTPServerV6(http.server.HTTPServer):
    address_family = socket.AF_INET6
  
def domake():
    # build directory
    os.chdir("./../")
    ipv6_address = '::1'
    server_address = (ipv6_address, 6443)
    #httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)
    httpd = HTTPServerV6(server_address, http.server.SimpleHTTPRequestHandler)
    httpd.socket = ssl.wrap_socket(httpd.socket,
                                   server_side=True,
                                   certfile='localhost.crt',
                                   keyfile='localhost.key',
                                   ssl_version=ssl.PROTOCOL_TLSv1)
    print("6443 https server started")
    httpd.serve_forever()

# 利用執行緒執行 https 伺服器
make = threading.Thread(target=domake)
make.start()</t>
<t tx="yen.20170224232341.1"></t>
</tnodes>
</leo_file>
